* Powerline                                                       :Powerline:
#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t)
#+END_SRC

* Spaceline                                                       :Spaceline:
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-emacs-theme))
#+END_SRC

* Theme
#+BEGIN_SRC emacs-lisp
  (use-package gruvbox-theme
    :ensure t)
;  (use-package dracula-theme
;    :ensure t)
    (use-package doom-themes
    :ensure t)
  (load-theme 'doom-tomorrow-night t)
#+END_SRC

* Font
#+BEGIN_SRC emacs-lisp
  (set-default-font "Iosevka 13" nil t)
#+END_SRC

* Simple Configs
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (setq ns-use-srgb-colorspace t)
  (add-to-list 'load-path' "~/.emacs.d/lisp/")
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
  (add-hook 'prog-mode-hook 'linum-mode)

  (setq make-backup-files nil
      auto-save-default nil
      visible-bell nil)
  ; Highlight tabs and trailing whitespace everywhere
  (setq whitespace-style '(face trailing tabs))
  (custom-set-faces
  '(whitespace-tab ((t (:background "red")))))
  (global-whitespace-mode)
#+END_SRC

* Better Defaults
#+BEGIN_SRC emacs-lisp
  (use-package better-defaults
    :ensure t)
#+END_SRC

* Org - Org-noter
#+BEGIN_SRC emacs-lisp
  (use-package org)
  (use-package org-noter
    :ensure t)
#+END_SRC

* Disable ctrl z
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-z"))
#+END_SRC

* Flycheck -- DISABLED
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t)

#+END_SRC

* Restart-emacs
#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs
    :ensure t)
#+END_SRC
* Swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
:ensure t)
#+END_SRC
* Counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel
:ensure t)
#+END_SRC
* Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t)
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  (global-set-key "\C-s" 'swiper)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "<f6>") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+END_SRC

* Which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
:ensure t)
(which-key-mode)
#+END_SRC

* Vi-tilde-fring
#+BEGIN_SRC emacs-lisp
(use-package vi-tilde-fringe
:ensure t)
(add-hook 'prog-mode-hook 'vi-tilde-fringe-mode)
#+END_SRC

* Toc-org
#+BEGIN_SRC emacs-lisp
(use-package toc-org
:ensure t)
(add-hook 'org-mode-hook 'toc-org-enable)
#+END_SRC

* Smartparens
  - M-x sp-cheat-sheet will show you all the commands available, with examples.
#+BEGIN_SRC emacs-lisp
(use-package smartparens
:ensure t)
(add-hook 'prog-mode-hook 'smartparens-mode)
#+END_SRC

* Rainbow-delimiters
  - M-x customize-group rainbow-delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
:ensure t)
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

* Popwin -- DISABLED
#+BEGIN_SRC emacs-lisp
(use-package popwin
:ensure t)
;(popwin-mode 1)
#+END_SRC

* Org-bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
:ensure t)
(add-hook 'org-mode-hook 'org-bullets-mode)
#+END_SRC

* Mwim
#+BEGIN_SRC emacs-lisp
(use-package mwim
:ensure t)
(global-set-key (kbd "C-a") 'mwim-beginning)
(global-set-key (kbd "C-e") 'mwim-end)
#+END_SRC

* MoveText
#+BEGIN_SRC emacs-lisp
(use-package move-text
:ensure t)
(move-text-default-bindings)
#+END_SRC

* Link-hint
#+BEGIN_SRC emacs-lisp
(use-package link-hint
:ensure t 
:bind
("C-c l o" . link-hint-open-link)
("C-c l c" . link-hint-copy-link))
#+END_SRC

* Ivy-hydra
#+BEGIN_SRC emacs-lisp
(use-package ivy-hydra
:ensure t)
#+END_SRC

* Iedit
#+BEGIN_SRC emacs-lisp
(use-package iedit
:ensure t)
#+END_SRC

* Hngry-delete
#+BEGIN_SRC emacs-lisp
(use-package hungry-delete
:ensure t)
(global-hungry-delete-mode)
#+END_SRC

* hl-todo
#+BEGIN_SRC emacs-lisp
(use-package hl-todo
:ensure t)
(add-hook 'prog-mode-hook 'hl-todo-mode)
#+END_SRC

* Highlight-parentheses
#+BEGIN_SRC emacs-lisp
(use-package highlight-parentheses
:ensure t)
(global-highlight-parentheses-mode)
#+END_SRC

* Highlight-numbers
#+BEGIN_SRC emacs-lisp
(use-package highlight-numbers
:ensure t)
(add-hook 'prog-mode-hook 'highlight-numbers-mode)
#+END_SRC

* Golden-ratio
#+BEGIN_SRC emacs-lisp
(use-package golden-ratio
:ensure t)
(golden-ratio-mode 1)
(setq golden-ratio-adjust-factor .8
      golden-ratio-wide-adjust-factor .8)
#+END_SRC

* Clean-aindent
#+BEGIN_SRC emacs-lisp
(use-package clean-aindent-mode
:ensure t)
(defun my-pkg-init()
  (electric-indent-mode -1)  ; no electric indent, auto-indent is sufficient
  (clean-aindent-mode t)
  (setq clean-aindent-is-simple-indent t)
  (define-key global-map (kbd "RET") 'newline-and-indent))
(add-hook 'after-init-hook 'my-pkg-init)
#+END_SRC

* Column-enforce-mode
#+BEGIN_SRC emacs-lisp
(use-package column-enforce-mode
:ensure t)
(add-hook 'prog-mode-hook 'column-enforce-mode)
#+END_SRC

* Anzu
#+BEGIN_SRC emacs-lisp
(use-package anzu
:ensure t)
(global-anzu-mode +1)
#+END_SRC

* Fill-columns-indicator
  - To toggle graphical indication of the fill column in a buffer,
  use the command fci-mode.
#+BEGIN_SRC emacs-lisp
(use-package fill-column-indicator
:ensure t)
#+END_SRC

* Diminish
#+BEGIN_SRC emacs-lisp
(use-package diminish
:ensure t)
(diminish 'anzu-mode)
(diminish 'ivy-mode)
(diminish 'golden-ratio-mode)
(diminish 'which-key-mode)
(diminish 'highlight-parentheses-mode)
(diminish 'flycheck-mode)
(diminish 'hungry-delete-mode)
(diminish 'column-enforce-mode)
(diminish 'smartparens-mode)
(diminish 'vi-tilde-fringe-mode)
(diminish 'global-whitespace-mode)
#+END_SRC

* Ace-window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
:ensure t)
(global-set-key (kbd "M-o") 'ace-window)
#+END_SRC

* Haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
:ensure t)
#+END_SRC

* Exec-path-from-shell
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
:ensure t)
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+END_SRC

